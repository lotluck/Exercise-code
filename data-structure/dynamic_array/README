1. 还是make直接编译完成，在bin目录下执行，make clean清除。

2.忽略数组元素插入和删除的效率低下，常规数组最重要的问题在于数组的规模无法实时的增大或者减小，
这会极大的影响程序的数据存储。动态数组满足要求可以进行动态的扩充和缩小，还能实现对任意类型元素的存储。
因为是void *。动态数组通过malloc和relloc结合实现，里面用到了函数指针，考虑到以后的扩展问题，也留了
接口，模块化编程，每个小函数只完成自己特定的功能，模块之间嵌套使用，不要重复造轮子。除此之外还用到了
迭代器，在C语言中采用结构体方式构造出迭代器。迭代器将忽视整个数据结构的细节，仅仅对数据结构进行遍历的
“指针”，里面有正向 和 反向之分。我在dynamic_array中给迭代器留了接口，它才可以使用。这里让我对数据结构
又有了认识。
