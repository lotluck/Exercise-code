// 静态成员一定要初始化   否则编译能通过，链接通不过
int CRentangle::Tatalarea=0;
int CRentangle::Tatalnumber=0;



在静态成员函数中，不能访问非静态成员变量，也不能调用非静态成员函数，因为呢静态成员不属于某个特定的对象，调用非静态成员变量不知道这个是属于谁的。


对于上面这个程序还有缺陷，，因为这仅仅是有参构造函数，如果无参构造函数怎么办，有时候调用复制构造函数怎么办，不是有所的构造函数来初始化，还有如果有临时对象的话，，那么只会调用析构函数，导致静态成员变量的值减少。

我们可以为CRentangle写一个复制构造函数

CRentangle::CRentangle(CRentangle &r){

      w=r.w;
      h=e.h;
      Tatalnumber++;
      Tatalarea+=w*h#include<iostream>

using namespace std;


/*静态成员函数的本质实际上是全局函数，静态成员易于维护和整理*/ 

class CRentangle{
    private:	
		int w;
		int h;
		static int Tatalarea;
		static int Tatalnumber;
	public:
		CRentangle(int w,int h ){
			this->w=w;
			this->h=h;
			Tatalarea+=w*h;
			Tatalnumber+=1;
		}
	    static void Display(); 
		~CRentangle(){
		
		Tatalnumber--;
			
		}
};

void CRentangle::Display(){
	cout<<"输出静态成员变量："<<endl;
	cout<<Tatalarea<<endl<<Tatalnumber<<endl;
}



// 静态成员一定要初始化 
int CRentangle::Tatalarea=0;
int CRentangle::Tatalnumber=0;

int main(){
	CRentangle a(2,9),b(2,6);
	//cout<<CRentangle.Tatalarea<<endl;  错误 因为静态成员私有 不可以用调用 
      a.Display();
      CRentangle::Display();
	
	
	return 0;
}


类名：：成员名

对象名.成员名

指针->成员名

引用.成员名


