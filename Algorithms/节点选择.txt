#include <stdio.h>
#include <stdlib.h>
#include <string.h>


#define M 1000
#define  max(a,b) ((a)>(b)?(a):(b))


typedef struct Node{
    int vex;
    Node *next;
}Child;

Child *head[M];

int f[M][2],pow[M],visit[M];


void addAD(int u,int v)
{
    Child *p,*q;
    p = (Child *)malloc(sizeof(Child));
    p->vex = v;
    p->next = head[u];
    head[u] = p;

    q = (Child *)malloc(sizeof(Child));
    q->vex = u;
    q->next = head[v];
    head[v] = q;
}


void GetResult(int v)
{
    visit[v] = 1;
    Child *p;
    for(p = head[v]; p != NULL; p = p->next){
        if(visit[p->vex] == 0){
            GetResult(p->vex);
            f[v][1]  = f[v][1] + f[p->vex][0];
            f[v][0] += max(f[p->vex][0],f[p->vex][1]);
        }
    }

    f[v][1] += pow[v];
}


int main(int argc,char *argv[])
{
    int i,u,v,n;

    memset(head,NULL,sizeof(head));
    memset(f,0,sizeof(f));
    memset(visit,0,sizeof(visit));

    scanf("%d",&n);

    for(i=1;i<=n;i++){
       scanf("%d",&pow[i]);
    }

    for(i = 1; i < n; i++){
        scanf("%d%d",&u,&v);
        addAD(u,v);
    }

    GetResult(1);

    printf("%d\n",max(f[1][0],f[1][1]));

    return 0;
}


#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define N 1000
#define max(a,b) (a>b?a:b)

int m = 0;

int head[N+1];
int visit[N+1];
int value[N+1];


struct EDGE{
    int to;
    int next;
}edge[N*2];

struct NODE{
    int yes;
    int no;
}node[N];


void add_edge(int u,int v)
{
    edge[m].to = v;
    edge[m].next = head[u];
    head[u] = m++;
}
void dp_dfs(int x)
{
    int i = 0;
    int v = 0;

    visit[x] = 1;
    node[x].yes = value[x];
    node[x].no  = 0;

    for(i = head[x]; i != -1; i = edge[i].next){
        v = edge[i].to;
        if(visit[v]){
            continue;
        }//end if
        dp_dfs(v);
        node[x].yes += node[v].no;
        node[x].no  += max(node[v].yes,node[v].no);
    }

}

int main(int argc,char *argv[])
{
    int i = 0;
    int n = 0;
    int u = 0;
    int v = 0;

    memset(head,-1,sizeof(head));
    memset(visit,0x00,sizeof(visit));
    memset(value,0x00,sizeof(value));

    scanf("%d",&n);
    for(i = 0; i < n; i++){
        scanf("%d",&value[i]);
    }
    for(i = 0; i < n-1; i++){
        scanf("%d%d",&u,&v);
        add_edge(u,v);
        add_edge(v,u);
    }

    dp_dfs(1);

    printf("%d\n",max(node[1].yes,node[1].no));
    return 0;
} 