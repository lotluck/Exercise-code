一致性hash    http://www.jiacheo.org/blog/174

hash如何解决冲突问题   http://www.cnblogs.com/jillzhang/archive/2006/11/03/548671.html

#define   HASHSIZE  12
#define   NULLKEY   -32768


typedef  struct
{
    int *elem;
    int count;
}Hashtable;

int init_hashtable(Hashtable *H)
{
    H->count = HASHSIZE;
    H->elem = (int *)malloc(HASHSIZE * sizeof(int));
    if(!H->elem){
        return -1;
    }

    for(int i = 0; i < HASHSIZE; i++){
         H->elem[i] = NULLKEY ;
    }
    return 0;
}

int Hash(int key)
{
    return key % HASHSIZE;
}

void insert_hash(Hashtable *H,int key)
{
    int addr;

    addr = Hash(key);
    while(H->elem[addr] != NULLKEY){
        addr = (addr + 1) % HASHSIZE;
    }

    H->elem[addr] = key;
}



int search_hash(Hashtable H,int key,int *addr)
{
     *addr = Hash(key);
     while(H.elem[*addr] != key){
         *addr = (*addr + 1) % HASHSIZE;
     }
     if(H.elem[*addr] == key){
        return 0;
     }else{
        return -1;
     }
}
